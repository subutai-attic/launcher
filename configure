#!/bin/bash

helpmessage()
{
cat <<ENDOFMSG
usage: configure [options]
Configuration script for Subutai Launcher on Linux and MacOS platforms. 

Options:
    --help
      Displays this help message.

    --python=<version>
      Specify a version of python to use. Example:
      --python=3.6m

    --python-dir=<path>
      Looking for python files in specified directory

    --no-tests
      Disable building of tests

    --no-ui
      Disable building of UI client

    --no-cli
      Disable build of CLI client

    --static 
      Build only static library 

    --shared 
      Build only shared library 

    --collect-static=<directory>
      Specify a directory where static libraries will be collected. When this option is enabled configure will create this directory and
      place all *.a files it find into it. This will allow linker to use static libraries over dynamic as a workaround for QA1393
      (For more details see: http://developer.apple.com/library/mac/#qa/qa2006/qa1393.html)
      This will help developers to make static build for local use only. 
      
    --with-custom-python=<directory>
      Specify directory to a custom Python installation. It should be compiled and installed Python, not just a source code.

    --scheme=<scheme>
      Build scheme for launcher. Possible values are: dev, master, production. Default: production

ENDOFMSG
exit
}

tests=1
static=0
shared=0
collect_static=""
python="2.7"
pylib=""
py_header=""
py_config_header=""
scheme="production"
lib_ext=""
openssl_dir=""
# Top directory of openssl library
openssl_directory=""
# Operating system specific libraries used in library
os_libs=""
# Additional defines added to CFLAGS
extra_defines=
# Additional libraries added to linker
extra_libraries=
# Code extension for Juce source files. On darwin we use 'mm'
code_extension="cpp"
custom_python=""

os=$(uname)

echo "Configuring for $os"
if [ "$os" == "Linux" ]; then
    lib_ext="so"
    top_lib_dir=/usr/lib
    top_include_dir=/usr/include
    python_dir=/usr
    os_libs="-lrt"
    extra_defines="-DLINUX=1"
    extra_libraries="-lX11 -lXext -lXinerama -lfreetype"
elif [ "$os" == "Darwin" ]; then
    lib_ext="dylib"
    top_lib_dir=/usr/local
    top_include_dir=/usr/local
    python_dir=/usr/local
    s_libs=""
    extra_defines=
    code_extension="mm"
else
    echo "$os unsupported platform"
    exit
fi

find_openssl_directory()
{
    echo -e "Looking for openssl directory..."

    local header_location=`find $top_lib_dir -name 'crypto.h' | grep -v Permission`

    if [[ ( $? != 0 ) || ( -z "$header_location" ) ]]; then
        echo "WARNING: Openssl library was not found"
        return
    fi

    while read -r line; do
        while :
        do
            line=`dirname $line`
            if [[ ( "$line" == "$top_lib_dir" ) || ( "$line" == "/" ) || ( $? != 0 ) ]]; then
                break
            fi
            sslex=`find $line -name "libssl*$lib_ext" | grep -v Permission | head -1`
            if [[ ( $? == 0 ) && ( ! -z "$sslex" ) ]]; then
                openssl_directory=$line
                echo -e "OK [$openssl_directory]"
                return
            fi
        done
    done <<< "$header_location"
    echo "FAIL. openssl directory was not found"
}

check_python()
{
    if [ $static -eq 1 ]; then
        lext="a"
    else
        lext=$lib_ext
    fi

    echo -n "Looking for libpython$1.$lext library path... "

    pypath=`find $python_dir -name "libpython$1.$lext" | grep -v Permission | head -1`
    if [[ ( $? != 0 ) || ( -z "$pypath" ) ]]; then
        echo "ERROR: Failed to find path to python library"
        exit
    else
        pylib=`dirname $pypath`
        echo "OK [$pylib]"
    fi
}

check_python_header() 
{
    echo -n "Looking for Python.h... "

    local py_header_dir=`find $python_dir -name "Python.h" | grep $python | grep -v Permission`
    if [[ ( $? != 0 ) || ( -z "$py_header_dir" ) ]]; then
        echo -e "FAIL"
        echo -e "Couldn't find libpython$1 directory under $python_dir"
        exit
    fi
    while read -r line; do
        py_header=`dirname $line`
        echo -e "OK [$py_header]"
        return
    done <<< "$py_header_dir"
    echo -e "FAIL"
    echo -e "Couldn't find Python.h in:\n $py_header_dir"
    exit
}

check_python_pyconfig() 
{
    echo -n "Looking for pyconfig.h... "

    local py_header_dir=`find $python_dir -name "pyconfig.h" | grep $python | grep -v PC | grep -v Permission`
    if [[ ( $? != 0 ) || ( -z "$py_header_dir" ) ]]; then
        echo -e "FAIL"
        echo -e "Couldn't find pyconfig.h directory under $python_dir"
        exit
    fi
    while read -r line; do
        py_config_header=`dirname $line`
        echo -e "OK [$py_config_header]"
        return
    done <<< "$py_header_dir"
    echo -e "FAIL"
    echo -e "Couldn't find Python.h in:\n $py_config_header"
    exit
}

find_openssl_header()
{
    echo -n "Looking for crypto.h... "

    local openssl_dirs=`find $top_include_dir -name "crypto.h" | grep -v Permission | head -1`
    if [[ ( $? != 0 ) || ( -z "$openssl_dirs" ) ]]; then
        echo -e "FAIL"
        echo -e "Couldn't find crypto.h directory under $top_include_dir"
        exit
    fi
    openssl_dir=`dirname $openssl_dirs`
    openssl_dir=`dirname $openssl_dir`
    echo -e "OK [$openssl_dir]"
}

collect_static_libraries()
{
    if [ "$collect_static" == "" ]; then
        return
    fi
    echo "Collecting static libraries into $collect_static"
    mkdir -p $collect_static
    if [ $? != 0 ]; then
        echo "Failed to create $collect_static directory" 
        exit
    fi
    rm -f $collect_static/*.a
    rm -f $collect_static/Python
    # Looking for Poco static libraries
    find /usr -name 'libPoco*.a' -exec cp -v {} $collect_static/ \;
    find $python_dir -name 'libpython*.a' -exec cp -v {} $collect_static/ \;
    cp -v $collect_static/libpython$python.a $collect_static/Python
    find /usr -name 'libssl*.a' -exec cp -v {} $collect_static/ \;
    find /usr -name 'libcrypto*.a' -exec cp -v {} $collect_static/ \;
    find /usr -name 'libssh*.a' -exec cp -v {} $collect_static/ \;
}

while [ $# -ge 1 ]; do

    case "$1" in
        --python=*)
            python="`echo ${1} | awk '{print substr($0,10)}' | tr ',;' '  '`" 
            ;;

        --python-dir=*)
            python_dir="`echo ${1} | awk '{print substr($0,14)}' | tr ',;' '  '`" 
            echo "Specified Python directory: $python_dir"
            ;;

        --with-custom-python=*)
            custom_python="`echo ${1} | awk '{print substr($0,22)}' | tr ',;' '  '`" 
            python_dir=$custom_python
            ;;

        --scheme=*)
            scheme="`echo ${1} | awk '{print substr($0,10)}' | tr ',;' '  '`" 
            ;;

        --static)
            echo "Enabling static build"
            static=1
            ;;

        --shared)
            shared=1
            ;;

        --no-tests)
            tests=0
            ;;
        --collect-static=*)
            collect_static="`echo ${1} | awk '{print substr($0,18)}' | tr ',;' '  '`" 
            ;;

        --help)
            helpmessage ;;
        *)
            echo "Unrecongnized arguments"
            echo ""
            helpmessage ;;
    esac

    shift
done

check_python_header $python
check_python $python
check_python_pyconfig $python
#find_openssl_header
find_openssl_directory
collect_static_libraries

if [ "$scheme" == "production" ]; then
    extra_defines="$extra_defines -DNDEBUG"
else
    extra_defines="$extra_defines -DDEBUG -D_DEBUG"
fi

if [ "$os" == "Linux" ]; then
    extra_defines="$extra_defines -DLINUX=1"
fi

echo "# generated by configure script" > config.make
echo "PYTHON_VER = python$python" >> config.make
echo "PYLIB_DIR = $pylib" >> config.make
echo "PYLIB_HEADER_DIR = $py_header" >> config.make
echo "PYCONFIG_HEADER_DIR = $py_config_header" >> config.make
echo "BUILD_SCHEME = $scheme" >> config.make
echo "OPENSSL_DIR = $openssl_directory" >> config.make
echo "OS = $os" >> config.make
echo "SYSLIBS = $os_libs" >> config.make
echo "LIB_EXT = $lib_ext" >> config.make
echo "EXTRA_DEFINES = $extra_defines" >> config.make
echo "CODE_EXT = $code_extension" >> config.make
echo "EXTRA_LIBS = $extra_libraries" >> config.make
if [ "$scheme" == "production" ]; then
    echo "BUILD_SCHEME_DEF = -DBUILD_SCHEME_PRODUCTION" >> config.make
elif [ "$sheme" == "master" ]; then
    echo "BUILD_SCHEME_DEF = -DBUILD_SCHEME_MASTER" >> config.make
else
    echo "BUILD_SCHEME_DEF = -DBUILD_SCHEME_DEV" >> config.make
fi
if [ $shared -eq 0 ]; then
    if [ $static -eq 1 ]; then
        echo "STATIC_BUILD = 1" >> config.make
    else
        echo "SHARED_BUILD = 1" >> config.make
    fi
else
    echo "SHARED_BUILD = 1" >> config.make
    if [ $static -eq 1 ]; then
        echo "STATIC_BUILD = 1" >> config.make
    fi
fi
if [ $tests -eq 1 ]; then
    echo "BUILD_TESTS = 1" >> config.make
fi
if [ "$os" == "Linux" ]; then
    echo "LIBDIRS = -L/usr/lib/x86_64-linux-gnu -L$pylib -L../bin -L/usr/X11R6/lib -L/usr/local/lib -L/usr/lib -L$openssl_directory/lib" >> config.make
    echo "WLST = -Wl,-Bstatic " >> config.make
    echo "WLSH = -Wl,-Bdynamic " >> config.make
    echo "export WLST" >> config.make
    echo "export WLSH" >> config.make
elif [ "$os" == "Darwin" ]; then
    stlibs=""
    if [ "$collect_static" != "" ]; then
        stlibs="-L$collect_static"
    fi
    echo "LIBDIRS = $stlibs -L/usr/local/lib -L$pylib -L../bin -L$openssl_directory/lib" >> config.make
    echo "BLDFLAGS = -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -stdlib=libc++ -mmacosx-version-min=10.12 -framework Foundation -framework Carbon -framework Cocoa -framework IOKit -framework QuartzCore -framework WebKit" >> config.make
    echo "export BLDFLAGS" >> config.make
fi
cat <<__EOF__ >>config.make
export PYTHON_VER
export PYLIB_DIR
export PYLIB_HEADER_DIR
export PYCONFIG_HEADER_DIR
export BUILD_SCHEME
export BUILD_SCHEME_DEF
export OPENSSL_DIR
export STATIC_BUILD
export SHARED_BUILD
export BUILD_TESTS
export OS
export SYSLIBS
export LIB_EXT
export EXTRA_DEFINES
export CODE_EXT
export EXTRA_LIBS
export LIBDIRS
__EOF__
